/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>

/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define COLEMAK 1
#define NUM     2
#define SYM     3
#define FUN     4

/ {
    // macros

    macros {
        ZMK_MACRO(

        nxt_tab,

        wait-ms = <0>;
        tap-ms = <10>;
        bindings = <&kp LC(TAB)>;

        )

      ZMK_MACRO(

        prv_tab,
        wait-ms = <0>;
        tap-ms = <10>;
        bindings = <&kp LC(LS(TAB))>;

        )
    };

    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings =
                <&kp COMMA>,
                <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings =
                <&kp DOT>,
                <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            masked_mods = <(MOD_LSFT|MOD_RSFT)>;// don't send shift
        };
    };

    // combos

    combos {
        compatible = "zmk,combos";

        // right hand 

        combo_esc {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp LGUI>;
        };

        combo_fullscreen {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp F11>;
        };

        combo_wkspc_up {
            timeout-ms = <50>;
            key-positions = <9 19>;
            bindings = <&kp LC(UP)>;
        };

        combo_wkspc_down {
            timeout-ms = <50>;
            key-positions = <19 29>;
            bindings = <&kp LC(DOWN)>;
        };

        combo_win_up {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp LS(LG(UP))>;
        };

        combo_win_down {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp LS(LG(DOWN))>;
        };

        combo_win_left {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp LS(LG(LEFT))>;
        };

        combo_win_right {
            timeout-ms = <50>;
            key-positions = <9 18>;
            bindings = <&kp LS(LG(RIGHT))>;
        };

        combo_rdelete {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp DELETE>;
        };

        // left hand 

        combo_zoomin {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp LC(PLUS)>;
        };

        combo_zoomout {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp LC(MINUS)>;
        };

        combo_pgdn {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp PG_DN>;
        };

        combo_pgup {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp PG_UP>;
        };

        combo_ldelete {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp DELETE>;
        };

        // symbols

        combo_underscore {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp UNDERSCORE>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp MINUS>;
        };

        // toggles

        combo_capswd {
            timeout-ms = <50>;
            key-positions = <2 7>;
            bindings = <&caps_word>;
        };

        combo_lsym {
            timeout-ms = <50>;
            key-positions = <31 34>;
            bindings = <&tog 0>;
        };

        combo_lnum {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&tog 0>;
        };

        // output selection
        // combo_outusb {
        //     timeout-ms = <50>;
        //     key-positions = <4 14>;
        //     bindings = <&out OUT_USB>;
        // };

        combo_outble {
            timeout-ms = <50>;
            key-positions = <4 14>;
            bindings = <&out OUT_BLE>;
        };

        combo_outtog {
            timeout-ms = <50>;
            key-positions = <4 24>;
            bindings = <&out OUT_TOG>;
        };

        // ble selection

        combo_ble1 {
            timeout-ms = <50>;
            key-positions = <14 24>;
            bindings = <&bt BT_SEL 0>;
        };

        combo_ble2 {
            timeout-ms = <50>;
            key-positions = <13 23>;
            bindings = <&bt BT_SEL 1>;
        };

        combo_ble3 {
            timeout-ms = <50>;
            key-positions = <12 22>;
            bindings = <&bt BT_SEL 2>;
        };

        combo_ble4 {
            timeout-ms = <50>;
            key-positions = <11 21>;
            bindings = <&bt BT_SEL 3>;
        };

        combo_ble5 {
            timeout-ms = <50>;
            key-positions = <10 20>;
            bindings = <&bt BT_SEL 4>;
        };
    };
};

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
         &kp Q      &kp W     &kp E      &kp R          &kp T         &kp Y  &kp U      &kp I       &kp O      &kp P
         &kp A      &kp S     &kp D      &kp F          &kp G         &kp H  &kp J      &kp K       &kp L  &kp ENTER
         &kp Z      &kp X     &kp C      &kp V          &kp B         &kp N  &kp M  &kp COMMA  &kp PERIOD  &kp SLASH
  &kp NUMBER_1  &kp LSHFT  &kp LWIN  &kp SPACE  &kp BACKSPACE  &kp NUMBER_3
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp UP DOWN>;
        };
    };
};
